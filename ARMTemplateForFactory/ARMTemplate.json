{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DP-ADF-Demo"
		},
		"LS_ABLOB_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://dpconfigdemo.blob.core.windows.net"
		},
		"LS_ABLOB_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "13085c86-4bcb-460a-a6f0-b373421c6323"
		},
		"LS_ABLOB_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "Ee57ef37-f7ef-4f53-a1e4-b0169c3d3c0a"
		},
		"LS_ADLSGEN2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dpadlsdemo.dfs.core.windows.net"
		},
		"LS_ADLSGEN2_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "13085c86-4bcb-460a-a6f0-b373421c6323"
		},
		"LS_ADLSGEN2_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "Ee57ef37-f7ef-4f53-a1e4-b0169c3d3c0a"
		},
		"LS_AKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://dp-keyvlt-demo.vault.azure.net/"
		},
		"LS_ONPREM_SQLSERVER_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "C1-SQL-ConnectionString"
		},
		"LS_SYNAPSE_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "synapseconnectionstring"
		},
		"TR_SYNAPSE_PAUSE_properties_PL_SYNAPSE_RESUME_PAUSE_parameters_ResourceGroup": {
			"type": "string",
			"defaultValue": "DataPlatform-Demo"
		},
		"TR_SYNAPSE_PAUSE_properties_PL_SYNAPSE_RESUME_PAUSE_parameters_SubscriptionID": {
			"type": "string",
			"defaultValue": "543c86f3-c680-437b-a0cf-453e9152ed1d"
		},
		"TR_SYNAPSE_PAUSE_properties_PL_SYNAPSE_RESUME_PAUSE_parameters_WorkspaceName": {
			"type": "string",
			"defaultValue": "dp-demo-synapseanalytics"
		},
		"TR_SYNAPSE_PAUSE_properties_PL_SYNAPSE_RESUME_PAUSE_parameters_SQLPoolName": {
			"type": "string",
			"defaultValue": "demodpdedicatedsqlpool"
		},
		"TR_SYNAPSE_PAUSE_properties_PL_SYNAPSE_RESUME_PAUSE_parameters_PauseorResume": {
			"type": "string",
			"defaultValue": "Pause"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/EXEC_RAW_ASSEMBLY_PROCESSING')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RAW_ASSEMBLY_PROCESSING",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/DataPlatform/Release3.0.5/CommonFunctions/Raw_Assembly",
							"baseParameters": {
								"ActivityID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"config_path_read": {
									"value": "/mnt/dataplatformconfig/SourceToRaw/ConfigRead/",
									"type": "Expression"
								},
								"extract_path": {
									"value": "/mnt/dataplatform/Tenant1/Raw/PolicyAdmin/SRC_ConceptOne/",
									"type": "Expression"
								},
								"extract_reference_path": {
									"value": "/mnt/dataplatform/Tenant1/Raw/ReferenceData/BlobData/",
									"type": "Expression"
								},
								"isInitialLoad": {
									"value": "true",
									"type": "Expression"
								},
								"istracing_enabled": {
									"value": "true",
									"type": "Expression"
								},
								"LogPath": {
									"value": "/mnt/dataplatform/Tenant1/Log/C1/",
									"type": "Expression"
								},
								"raw_data_date_format": {
									"value": "@concat('/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
									"type": "Expression"
								},
								"LevelofNotebook": {
									"value": "S2R",
									"type": "Expression"
								}
							},
							"libraries": [
								{
									"pypi": {
										"package": "pypika"
									}
								},
								{
									"pypi": {
										"package": "jsonschema"
									}
								},
								{
									"pypi": {
										"package": "jsonpath_ng"
									}
								},
								{
									"pypi": {
										"package": "azure.storage.blob"
									}
								}
							]
						},
						"linkedServiceName": {
							"referenceName": "LS_ADBCLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-15T11:49:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADBCLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXEC_RAW_ASSEMBLY_PROCESSING_DELTA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RAW_ASSEMBLY_PROCESSING",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/DataPlatform/Release3.0.5/CommonFunctions/Raw_Assembly",
							"baseParameters": {
								"ActivityID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"config_path_read": {
									"value": "/mnt/dataplatformconfig/SourceToRaw/ConfigRead/",
									"type": "Expression"
								},
								"extract_path": {
									"value": "/mnt/dataplatform/Tenant1/Raw/PolicyAdmin/SRC_ConceptOne/",
									"type": "Expression"
								},
								"extract_reference_path": {
									"value": "/mnt/dataplatform/Tenant1/Raw/ReferenceData/BlobData/",
									"type": "Expression"
								},
								"isInitialLoad": {
									"value": "false",
									"type": "Expression"
								},
								"istracing_enabled": {
									"value": "true",
									"type": "Expression"
								},
								"LogPath": {
									"value": "/mnt/dataplatform/Tenant1/Log/C1/",
									"type": "Expression"
								},
								"raw_data_date_format": {
									"value": "@concat('/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
									"type": "Expression"
								},
								"WriteCategory": {
									"value": "Hot",
									"type": "Expression"
								},
								"LevelofNotebook": {
									"value": "S2R",
									"type": "Expression"
								}
							},
							"libraries": [
								{
									"pypi": {
										"package": "pypika"
									}
								},
								{
									"pypi": {
										"package": "jsonschema"
									}
								},
								{
									"pypi": {
										"package": "jsonpath_ng"
									}
								},
								{
									"pypi": {
										"package": "azure.storage.blob"
									}
								}
							]
						},
						"linkedServiceName": {
							"referenceName": "LS_ADBCLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADBCLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_C1_CONNECTOR_VALIDATION')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "connector validation",
				"activities": [
					{
						"name": "ACTIVITY_LKP_RDBMS_CONNECTOR_VALIDATION",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT name AS DatabaseName, state_desc AS DBStatus  FROM sys.databases where name='pipeline().parameters.DatabaseName'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DATASET_C1_CONNECTOR_VALIDATION",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DatabaseName": {
						"type": "string",
						"defaultValue": "TestDataC1"
					}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_CONNECTOR_VALIDATION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_C1_INGESTION_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Master pipeline to invoke source to raw pipleine",
				"activities": [
					{
						"name": "ACTIVITY_EXEC_PL_C1_CONNECTOR_VALIDATION",
						"description": "Pipeline to check the source database availability",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_C1_CONNECTOR_VALIDATION",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACTIVITY_EXEC_PL_C1_TO_RAW_COPY_FULL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ACTIVITY_EXEC_PL_C1_CONNECTOR_VALIDATION",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_C1_TO_RAW_COPY_FULL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACTIVITY_EXEC_PL_C1_TO_RAW_COPY_CHANGE",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ACTIVITY_EXEC_PL_C1_TO_RAW_COPY_FULL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACTIVITY_EXEC_PL_REFERENCE_DATA_RAW_COPY_FULL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_C1_TO_RAW_COPY_CHANGE",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACTIVITY_EXEC_PL_REFERENCE_DATA_RAW_COPY_FULL",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_REFERENCE_DATA_RAW_COPY_FULL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_C1_CONNECTOR_VALIDATION')]",
				"[concat(variables('factoryId'), '/pipelines/PL_C1_TO_RAW_COPY_FULL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_C1_TO_RAW_COPY_CHANGE')]",
				"[concat(variables('factoryId'), '/pipelines/PL_REFERENCE_DATA_RAW_COPY_FULL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_C1_INGESTION_MASTER_')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EXEC_PL_C1_INGESTION_MASTER",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_C1_INGESTION_MASTER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_C1_INGESTION_MASTER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_C1_TO_RAW_COPY_CHANGE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Master Pipeline to invoke multiple source to Raw based on different sources for a single Tenant",
				"activities": [
					{
						"name": "ACTIVITY_LKP_READ_CONFIG",
						"description": "Lookup activity to identify different Source Types for in a single Tenant",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DATASET_C1_CDC_CONFIG_PATH",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat(pipeline().parameters.Control_Folder,'/',pipeline().parameters.Control_Directory,'/')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.Control_File",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ACTIVITY_FILTER_CHANGE_TRACKING",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ACTIVITY_LKP_READ_CONFIG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACTIVITY_LKP_READ_CONFIG').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().SourceType,'SQLServer'), equals(item().CDCType,'ChangeTracking'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ACTIVITY_ITERATE_TABLELIST",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ACTIVITY_FILTER_CHANGE_TRACKING",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACTIVITY_FILTER_CHANGE_TRACKING').output.value",
								"type": "Expression"
							},
							"batchCount": 25,
							"activities": [
								{
									"name": "ACTIVITY_LKP_LAST_CHANGE_VERSION",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().Table_Schema}.table_store_ChangeTracking_version where TableName='@{item().Table_Name}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DATASET_C1_GET_CHANGE_VERSION",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "ACTIVITY_LKP_NEW_CHANGE_VERSION",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT CHANGE_TRACKING_CURRENT_VERSION() as CurrentChangeTrackingVersion",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DATASET_C1_SET_CHANGE_VERSION",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "LOOKUPDATAEXISTS",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "ACTIVITY_LKP_LAST_CHANGE_VERSION",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "ACTIVITY_LKP_NEW_CHANGE_VERSION",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT COUNT(*) AS TBLROWCNT FROM @{item().Table_Schema}.@{item().Table_Name} as C RIGHT OUTER JOIN CHANGETABLE(CHANGES @{item().Table_Schema}.@{item().Table_Name} , @{activity('ACTIVITY_LKP_LAST_CHANGE_VERSION').output.firstRow.SYS_CHANGE_VERSION}) as CT \nON @{item().JoinCondition}\nWHERE CT.SYS_CHANGE_VERSION <= '@{activity('ACTIVITY_LKP_NEW_CHANGE_VERSION').output.firstRow.CurrentChangeTrackingVersion}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_TBLCOUNTQUERY",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "COPY_DATA_IF_ROWCOUNT_EXISTS",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "LOOKUPDATAEXISTS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('LOOKUPDATAEXISTS').output.firstRow.TBLROWCNT,0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "ACTIVITY_COPY_DELTA",
												"description": "Copy activity to copy each table CDC data from source database store to destination store.",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"additionalColumns": [
															{
																"name": "IngestionDateTimeOn",
																"value": {
																	"value": "@concat(formatDateTime(utcnow(),'yyyy'),'-',formatDateTime(utcnow(),'MM'),'-',formatDateTime(utcnow(),'dd'),' ',formatDateTime(utcnow(),'HH'),':',formatDateTime(utcnow(),'mm'),':',formatDateTime(utcnow(),'ss'))",
																	"type": "Expression"
																}
															}
														],
														"sqlReaderQuery": {
															"value": "SELECT DISTINCT @{item().PrimaryColumnList},@{item().ColumnList},CT.SYS_CHANGE_VERSION, CT.SYS_CHANGE_OPERATION FROM @{item().Table_Schema}.@{item().Table_Name} as C RIGHT OUTER JOIN CHANGETABLE(CHANGES @{item().Table_Schema}.@{item().Table_Name} , @{activity('ACTIVITY_LKP_LAST_CHANGE_VERSION').output.firstRow.SYS_CHANGE_VERSION}) as CT \nON @{item().JoinCondition}\nWHERE CT.SYS_CHANGE_VERSION <= '@{activity('ACTIVITY_LKP_NEW_CHANGE_VERSION').output.firstRow.CurrentChangeTrackingVersion}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"dataIntegrationUnits": 2
												},
												"inputs": [
													{
														"referenceName": "DATASET_C1_GET_CHANGE_SET",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DATASET_C1_SINK_CHANGE_SET",
														"type": "DatasetReference",
														"parameters": {
															"FolderPath": {
																"value": "@concat(item().Tenant,'/',item().SinkFolder,'/',item().SubjectArea,'/',item().Source,'/',item().Table_Name,'/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
																"type": "Expression"
															},
															"FileName": {
																"value": "@concat(item().Table_Name,formatDateTime(utcnow(),'yyyy'),formatDateTime(utcnow(),'MM'),formatDateTime(utcnow(),'dd'),formatDateTime(utcnow(),'HH'),formatDateTime(utcnow(),'mm'),formatDateTime(utcnow(),'ss'),'.csv')",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "ACTIVITY_STOREDPROC_UPDATE_CHANGE_VERSION",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "ACTIVITY_COPY_DELTA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[Update_ChangeTracking_Version_Demo]",
													"storedProcedureParameters": {
														"CurrentTrackingVersion": {
															"value": {
																"value": "@{activity('ACTIVITY_LKP_NEW_CHANGE_VERSION').output.firstRow.CurrentChangeTrackingVersion}",
																"type": "Expression"
															},
															"type": "Int64"
														},
														"TableName": {
															"value": {
																"value": "@{activity('ACTIVITY_LKP_LAST_CHANGE_VERSION').output.firstRow.TableName}",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ONPREM_SQLSERVER",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "CREATELOGSFILES",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "ACTIVITY_COPY_DELTA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "SELECT \n'@{pipeline().Pipeline}' as Pipeline_Name,\n'@{item().Table_Name}' as Tablename,\n'@{activity('ACTIVITY_COPY_DELTA').output.rowsCopied}' as rowsCopied",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false,
													"dataIntegrationUnits": 2,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_STATURE_TABLE_RECORDS",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_CAPTURETBLLOGS",
														"type": "DatasetReference",
														"parameters": {
															"Folder": {
																"value": "@concat('Tenant1/Log/CopyTableLogs')",
																"type": "Expression"
															},
															"FileName": {
																"value": "@concat(item().Table_Name,'.csv')",
																"type": "Expression"
															},
															"Container": {
																"value": "@pipeline().parameters.Container_Name",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Control_Folder": {
						"type": "string",
						"defaultValue": "dataplatform-config"
					},
					"Control_Directory": {
						"type": "string",
						"defaultValue": "SourceToRaw"
					},
					"Control_File": {
						"type": "string",
						"defaultValue": "Configchangesettable.JSON"
					},
					"Container_Name": {
						"type": "string",
						"defaultValue": "dataplatform"
					}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_CDC_CONFIG_PATH')]",
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_GET_CHANGE_VERSION')]",
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_SET_CHANGE_VERSION')]",
				"[concat(variables('factoryId'), '/datasets/DS_TBLCOUNTQUERY')]",
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_GET_CHANGE_SET')]",
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_SINK_CHANGE_SET')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ONPREM_SQLSERVER')]",
				"[concat(variables('factoryId'), '/datasets/DS_STATURE_TABLE_RECORDS')]",
				"[concat(variables('factoryId'), '/datasets/DS_CAPTURETBLLOGS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_C1_TO_RAW_COPY_FULL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external config file to store source table list with partitions for each table.",
				"activities": [
					{
						"name": "ACTIVITY_LKP_READ_CONFIG",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DATASET_C1_REF_TABLE_CONFIG_PATH",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat(pipeline().parameters.Control_Folder,'/',pipeline().parameters.Control_Directory,'/')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.Control_File",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ACTIVITY_ITERATE_TABLELIST",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ACTIVITY_LKP_READ_CONFIG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACTIVITY_LKP_READ_CONFIG').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "ACTIVITY_COPY_TABLE",
									"description": "Copy activity to copy each table from source database store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "IngestionDateTimeOn",
													"value": {
														"value": "@concat(formatDateTime(utcnow(),'yyyy'),'-',formatDateTime(utcnow(),'MM'),'-',formatDateTime(utcnow(),'dd'),' ',formatDateTime(utcnow(),'HH'),':',formatDateTime(utcnow(),'mm'),':',formatDateTime(utcnow(),'ss'))",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "SELECT DISTINCT C.*,NULL AS SYS_CHANGE_VERSION, 'I' AS SYS_CHANGE_OPERATION FROM @{item().TableSchema}.@{item().TableName} as C",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "DATASET_C1_REF_TABLE_LIST",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DATASET_C1_REF_TABLE_SINK_CONFIG",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@concat(item().Tenant,'/',item().SinkFolder,'/',item().SubjectArea,'/',item().Source,'/',item().TableName,'/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(item().TableName,formatDateTime(utcnow(), 'yyyy'), formatDateTime(utcnow(),'MM'), formatDateTime(utcnow(),'dd'),formatDateTime(utcnow(),'HH'),formatDateTime(utcnow(),'mm'),formatDateTime(utcnow(),'ss'),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Control_Folder": {
						"type": "string",
						"defaultValue": "dataplatform-config"
					},
					"Control_File": {
						"type": "string",
						"defaultValue": "Configreferencetable.JSON"
					},
					"Control_Directory": {
						"type": "string",
						"defaultValue": "SourceToRaw"
					}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_REF_TABLE_CONFIG_PATH')]",
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_REF_TABLE_LIST')]",
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_REF_TABLE_SINK_CONFIG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_C1_TO_RAW_INITIAL_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline to ingest full data from all the tables from source to raw for initial load",
				"activities": [
					{
						"name": "ACTIVITY_LKP_READ_CONFIG",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT QUOTENAME(table_Schema) AS Table_Schema,TABLE_NAME AS Table_Name FROM information_Schema.tables WHERE table_Schema=',variables('SchemaName'))",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DATASET_C1_INITIAL_LOAD_TABLE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ACTIVITY_ITERATE_TABLELIST",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ACTIVITY_LKP_READ_CONFIG",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACTIVITY_EXEC_PL_REFERENCE_DATA_SRC_TO_RAW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACTIVITY_LKP_READ_CONFIG').output.value",
								"type": "Expression"
							},
							"batchCount": 25,
							"activities": [
								{
									"name": "ACTIVITY_COPY_TABLE",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "IngestionDateTimeOn",
													"value": {
														"value": "@concat(formatDateTime(utcnow(),'yyyy'),'-',formatDateTime(utcnow(),'MM'),'-',formatDateTime(utcnow(),'dd'),' ',formatDateTime(utcnow(),'HH'),':',formatDateTime(utcnow(),'mm'),':',formatDateTime(utcnow(),'ss'))",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "SELECT DISTINCT C.*,NULL AS SYS_CHANGE_VERSION, 'I' AS SYS_CHANGE_OPERATION\n FROM @{item().Table_Schema}.@{item().Table_Name} as C",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_SRC_TBL",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SINK_ADLS",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@concat(pipeline().parameters.Control_Folder,'/',pipeline().parameters.Control_RawFolder,'/',item().Table_Name,'/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(item().Table_Name,formatDateTime(utcnow(),'yyyy'),formatDateTime(utcnow(),'MM'),formatDateTime(utcnow(),'dd'),formatDateTime(utcnow(),'HH'),formatDateTime(utcnow(),'mm'),formatDateTime(utcnow(),'ss'),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ACTIVITY_EXEC_PL_REFERENCE_DATA_SRC_TO_RAW",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_REFERENCE_DATA_RAW_COPY_FULL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Control_Folder": {
						"type": "string",
						"defaultValue": "dataplatform"
					},
					"Control_RawFolder": {
						"type": "string",
						"defaultValue": "Tenant1/Raw/PolicyAdmin/SRC_ConceptOne"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "TestDataC1"
					}
				},
				"variables": {
					"SchemaName": {
						"type": "String",
						"defaultValue": "'Demo'"
					}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-16T09:51:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_INITIAL_LOAD_TABLE')]",
				"[concat(variables('factoryId'), '/pipelines/PL_REFERENCE_DATA_RAW_COPY_FULL')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_SRC_TBL')]",
				"[concat(variables('factoryId'), '/datasets/DS_SINK_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATAPROCESSCHECK')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CHECKRECORDCOUNT",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@pipeline().parameters.Logpath",
										"type": "Expression"
									},
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_CHECKRECORDCOUNT",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.Container_Name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "VALIDATETABLERECORDCOUNT",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "CHECKRECORDCOUNT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('CHECKRECORDCOUNT').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CHECKTABLEHASRECORDEXIST",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().Pipeline_Name, 'PL_C1_TO_RAW_COPY_CHANGE')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "TEMPVARIABLE",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "tempVar",
													"value": {
														"value": "@string(add(int(item().rowsCopied), int(variables('numberOfRowChanged'))))",
														"type": "Expression"
													}
												}
											},
											{
												"name": "NOOFROWSCHANGED",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "TEMPVARIABLE",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "numberOfRowChanged",
													"value": {
														"value": "@variables('tempVar')",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "RUN_PROCESSING_PL_IF_DATA_EXISTS",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "VALIDATETABLERECORDCOUNT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(int(variables('numberOfRowChanged')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "PL_PROCESSING_MASTER",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "PL_PROCESSING_MASTER",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Container_Name": {
						"type": "string",
						"defaultValue": "dataplatform"
					},
					"Logpath": {
						"type": "string",
						"defaultValue": "Tenant1/Log/CopyTableLogs"
					}
				},
				"variables": {
					"numberOfRowChanged": {
						"type": "String",
						"defaultValue": "0"
					},
					"tempVar": {
						"type": "String",
						"defaultValue": "0"
					}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CHECKRECORDCOUNT')]",
				"[concat(variables('factoryId'), '/pipelines/PL_PROCESSING_MASTER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DELTA_TBL_CLEANUP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline to delete lake tables",
				"activities": [
					{
						"name": "ACT_DELTA_TBL_CLEANUP",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/DataPlatform/Release3.0.0/CommonFunctions/Files_Cleanup_Activity",
							"baseParameters": {
								"config_path_read_r2c": {
									"value": "/mnt/dataplatformconfig/QA-RawToCurated/Configread/",
									"type": "Expression"
								},
								"config_path_read_c2p": {
									"value": "/mnt/dataplatformconfig/QA-CuratedToProcessed/Configread/",
									"type": "Expression"
								},
								"curated_path": {
									"value": "/mnt/dataplatform/Tenant1/Curated/PolicyAdmin/SRC_ConceptOne/",
									"type": "Expression"
								},
								"config_path_write_r2c": {
									"value": "/mnt/dataplatformconfig/QA-RawToCurated/Configwrite/",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ADBCLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADBCLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GOALS_FULL_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Goals",
				"activities": [
					{
						"name": "GET_FILES_LIST",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_GET_FILES",
								"type": "DatasetReference",
								"parameters": {
									"ControlFolder": {
										"value": "@pipeline().parameters.SRC_CONTAINERNAME",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.SourceFilePath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ITERATE-EACH-FILE_CSV",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GET_FILES_LIST",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_FILES_LIST').output.childitems",
								"type": "Expression"
							},
							"batchCount": 25,
							"activities": [
								{
									"name": "COPY_DATA",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "RecordIngestedBy",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "RecordIngestedOn",
													"value": {
														"value": "@concat(formatDateTime(utcnow(),'yyyy'),'-',formatDateTime(utcnow(),'MM'),'-',formatDateTime(utcnow(),'dd'),' ',formatDateTime(utcnow(),'HH'),':',formatDateTime(utcnow(),'mm'),':',formatDateTime(utcnow(),'ss'))",
														"type": "Expression"
													}
												},
												{
													"name": "RecordModifiedBy",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "RecordModifiedOn",
													"value": {
														"value": "@concat(formatDateTime(utcnow(),'yyyy'),'-',formatDateTime(utcnow(),'MM'),'-',formatDateTime(utcnow(),'dd'),' ',formatDateTime(utcnow(),'HH'),':',formatDateTime(utcnow(),'mm'),':',formatDateTime(utcnow(),'ss'))",
														"type": "Expression"
													}
												},
												{
													"name": "RecordStatus",
													"value": {
														"value": "'Null'",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_SRC_GOALS",
											"type": "DatasetReference",
											"parameters": {
												"ControlFolder": {
													"value": "@pipeline().parameters.SRC_CONTAINERNAME",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@pipeline().parameters.SourceFilePath",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SINK_GOALS",
											"type": "DatasetReference",
											"parameters": {
												"ControlFolder": {
													"value": "@pipeline().parameters.SINK_CONTAINERNAME",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@concat(pipeline().parameters.SinkFolderPath,'/',replace(replace(item().name,'.csv',''),' ',''),'/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(replace(replace(item().name,'.csv',''),' ',''),'_',formatDateTime(utcnow(),'yyyy'),formatDateTime(utcnow(),'MM'),formatDateTime(utcnow(),'dd'),formatDateTime(utcnow(),'HH'),formatDateTime(utcnow(),'mm'),formatDateTime(utcnow(),'ss'),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "GOALS_RAW_SUCCESS_LOG",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ITERATE-EACH-FILE_CSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DataFactoryName",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineName",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineStatus",
										"value": {
											"value": "Success",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineRunEndTime",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SUCCESSLOG",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@pipeline().parameters.Container",
										"type": "Expression"
									},
									"FolderName": {
										"value": "@pipeline().parameters.TempFolder",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_GOALS_RAW_LOG",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@pipeline().parameters.Container",
										"type": "Expression"
									},
									"LogPath": {
										"value": "@pipeline().parameters.LogFolderPath",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SinkFolderPath": {
						"type": "string",
						"defaultValue": "Tenant1/Raw/Goals"
					},
					"SRC_CONTAINERNAME": {
						"type": "string",
						"defaultValue": "dataplatform-config"
					},
					"SourceFilePath": {
						"type": "string",
						"defaultValue": "Goals"
					},
					"SINK_CONTAINERNAME": {
						"type": "string",
						"defaultValue": "dataplatform"
					},
					"LogFolderPath": {
						"type": "string",
						"defaultValue": "Tenant1/Log/GoalsLog"
					},
					"Container": {
						"type": "string",
						"defaultValue": "dataplatform"
					},
					"TempFolder": {
						"type": "string",
						"defaultValue": "Tenant1/Temp"
					}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-15T11:44:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_GET_FILES')]",
				"[concat(variables('factoryId'), '/datasets/DS_SUCCESSLOG')]",
				"[concat(variables('factoryId'), '/datasets/DS_GOALS_RAW_LOG')]",
				"[concat(variables('factoryId'), '/datasets/DS_SRC_GOALS')]",
				"[concat(variables('factoryId'), '/datasets/DS_SINK_GOALS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_GOALS_S2R_CHANGE_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GET-FILES",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "GET-LAST-MODIFIEDDATE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_GOALS_FOLDERS",
								"type": "DatasetReference",
								"parameters": {
									"ContainorName": {
										"value": "@pipeline().parameters.Source_Container_Name",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@activity('GET-LAST-MODIFIEDDATE').output.firstRow.PipelineRunEndTime",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ITERATE EACH FOLDER",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GET-FILES",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET-FILES').output.childItems",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 25,
							"activities": [
								{
									"name": "COPY FILES",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "RecordIngestedBy",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "RecordIngestedOn",
													"value": {
														"value": "@concat(formatDateTime(utcnow(),'yyyy'),'-',formatDateTime(utcnow(),'MM'),'-',formatDateTime(utcnow(),'dd'),' ',formatDateTime(utcnow(),'HH'),':',formatDateTime(utcnow(),'mm'),':',formatDateTime(utcnow(),'ss'))",
														"type": "Expression"
													}
												},
												{
													"name": "RecordModifiedBy",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "RecordModifiedOn",
													"value": {
														"value": "@concat(formatDateTime(utcnow(),'yyyy'),'-',formatDateTime(utcnow(),'MM'),'-',formatDateTime(utcnow(),'dd'),' ',formatDateTime(utcnow(),'HH'),':',formatDateTime(utcnow(),'mm'),':',formatDateTime(utcnow(),'ss'))",
														"type": "Expression"
													}
												},
												{
													"name": "RecordStatus",
													"value": {
														"value": "'Null'",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_GOALS_FILESLIST",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.Source_Container_Name",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_GOALSFILES_SINK",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@pipeline().parameters.Sink_Container_Name",
													"type": "Expression"
												},
												"FolderPath": {
													"value": "@concat(pipeline().parameters.Control_Raw_Folder,'/',substring(item().name,0,indexof(item().name,'.')),'/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(substring(item().name,0,indexof(item().name,'.')),formatDateTime(utcnow(),'yyyy'),formatDateTime(utcnow(),'MM'),formatDateTime(utcnow(),'dd'),formatDateTime(utcnow(),'HH'),formatDateTime(utcnow(),'mm'),formatDateTime(utcnow(),'ss'),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Copy logs",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ITERATE EACH FOLDER",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DataFactoryName",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineName",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineRunId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "PipelineStatus",
										"value": {
											"value": "Success",
											"type": "Expression"
										}
									},
									{
										"name": "PreviousPipelineTriggeredTime",
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SRC_LOGS_GOALS",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@pipeline().parameters.Sink_Container_Name",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.Temp_logPath",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_GOALS_LOGS_SINK",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@pipeline().parameters.Sink_Container_Name",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@pipeline().parameters.Log_Path",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "GET-LAST-MODIFIEDDATE",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_LKP_GOALS_LOG",
								"type": "DatasetReference",
								"parameters": {
									"Containername": {
										"value": "@pipeline().parameters.Sink_Container_Name",
										"type": "Expression"
									},
									"Folderpath": {
										"value": "@pipeline().parameters.Log_Path",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Source_Container_Name": {
						"type": "string",
						"defaultValue": "dataplatform-config/Goals/"
					},
					"Sink_Container_Name": {
						"type": "string",
						"defaultValue": "dataplatform"
					},
					"Control_Raw_Folder": {
						"type": "string",
						"defaultValue": "Tenant1/Raw/Goals"
					},
					"Temp_logPath": {
						"type": "string",
						"defaultValue": "Tenant1/Temp"
					},
					"Log_Path": {
						"type": "string",
						"defaultValue": "Tenant1/Log/GoalsLog"
					}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-15T11:44:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_GOALS_FOLDERS')]",
				"[concat(variables('factoryId'), '/datasets/DS_SRC_LOGS_GOALS')]",
				"[concat(variables('factoryId'), '/datasets/DS_GOALS_LOGS_SINK')]",
				"[concat(variables('factoryId'), '/datasets/DS_LKP_GOALS_LOG')]",
				"[concat(variables('factoryId'), '/datasets/DS_GOALS_FILESLIST')]",
				"[concat(variables('factoryId'), '/datasets/DS_GOALSFILES_SINK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_INGESTION_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EXEC_PL_C1_INGESTION_MASTER",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_C1_INGESTION_MASTER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_C1_INGESTION_MASTER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_INGESTION_MASTER_INCREMENTAL_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Master pipeline to invoke source to raw pipleine",
				"activities": [
					{
						"name": "ACTIVITY_EXEC_PL_C1_CONNECTOR_VALIDATION",
						"description": "Pipeline to check the source database availability",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_C1_CONNECTOR_VALIDATION",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACTIVITY_EXEC_PL_C1_TO_RAW_COPY_FULL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ACTIVITY_EXEC_PL_C1_CONNECTOR_VALIDATION",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_C1_TO_RAW_COPY_FULL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACTIVITY_EXEC_PL_C1_TO_RAW_COPY_CHANGE",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ACTIVITY_EXEC_PL_C1_TO_RAW_COPY_FULL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACTIVITY_EXEC_PL_REFERENCE_DATA_RAW_COPY_FULL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACTIVITY_EXEC_PL_GOALS_S2R_CHANGE_LOAD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_C1_TO_RAW_COPY_CHANGE",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACTIVITY_EXEC_PL_REFERENCE_DATA_RAW_COPY_FULL",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_REFERENCE_DATA_RAW_COPY_FULL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					},
					{
						"name": "ACTIVITY_EXEC_PL_GOALS_S2R_CHANGE_LOAD",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_GOALS_S2R_CHANGE_LOAD",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EXEC_RAW_ASSEMBLY_PROCESSING_DELTA",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ACTIVITY_EXEC_PL_C1_TO_RAW_COPY_CHANGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXEC_RAW_ASSEMBLY_PROCESSING_DELTA",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "DEMO_PIPELINES"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T15:50:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_C1_CONNECTOR_VALIDATION')]",
				"[concat(variables('factoryId'), '/pipelines/PL_C1_TO_RAW_COPY_FULL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_C1_TO_RAW_COPY_CHANGE')]",
				"[concat(variables('factoryId'), '/pipelines/PL_REFERENCE_DATA_RAW_COPY_FULL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_GOALS_S2R_CHANGE_LOAD')]",
				"[concat(variables('factoryId'), '/pipelines/EXEC_RAW_ASSEMBLY_PROCESSING_DELTA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_INGESTION_MASTER_INITIAL_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline to ingest full data from all the tables from source to raw for initial load with config file",
				"activities": [
					{
						"name": "ACTIVITY_LKP_READ_CONFIG",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DATASET_C1_CDC_CONFIG_PATH",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat(pipeline().parameters.Control_Folder,'/',pipeline().parameters.Control_Directory,'/')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.Control_File",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ACTIVITY_ITERATE_TABLELIST",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ACTIVITY_LKP_READ_CONFIG",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACTIVITY_EXEC_PL_REFERENCE_DATA_SRC_TO_RAW",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACTIVITY_EXEC_PL_RAW_COPY_FULL_DEMO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACTIVITY_EXEC_PL_GOALS_FULL_LOAD_DEMO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACTIVITY_LKP_READ_CONFIG').output.value",
								"type": "Expression"
							},
							"batchCount": 25,
							"activities": [
								{
									"name": "ACTIVITY_COPY_TABLE",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "IngestionDateTimeOn",
													"value": {
														"value": "@concat(formatDateTime(utcnow(),'yyyy'),'-',formatDateTime(utcnow(),'MM'),'-',formatDateTime(utcnow(),'dd'),' ',formatDateTime(utcnow(),'HH'),':',formatDateTime(utcnow(),'mm'),':',formatDateTime(utcnow(),'ss'))",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "SELECT DISTINCT C.*,NULL AS SYS_CHANGE_VERSION, 'I' AS SYS_CHANGE_OPERATION\n FROM @{item().Table_Schema}.@{item().Table_Name} as C",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "DS_SQL_SRC_TBL",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SINK_ADLS_C1",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@concat(item().Tenant,'/',item().SinkFolder,'/',item().SubjectArea,'/',item().Source,'/',item().Table_Name,'/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(item().Table_Name,formatDateTime(utcnow(),'yyyy'),formatDateTime(utcnow(),'MM'),formatDateTime(utcnow(),'dd'),formatDateTime(utcnow(),'HH'),formatDateTime(utcnow(),'mm'),formatDateTime(utcnow(),'ss'),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ACTIVITY_EXEC_PL_REFERENCE_DATA_SRC_TO_RAW",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_REFERENCE_DATA_RAW_COPY_FULL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACTIVITY_EXEC_PL_RAW_COPY_FULL_DEMO",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_RAW_COPY_FULL_DEMO",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EXEC_RAW_ASSEMBLY_PROCESSING",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ACTIVITY_ITERATE_TABLELIST",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXEC_RAW_ASSEMBLY_PROCESSING",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACTIVITY_EXEC_PL_GOALS_FULL_LOAD_DEMO",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_GOALS_FULL_LOAD",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Control_Folder": {
						"type": "string",
						"defaultValue": "dataplatform-config"
					},
					"Control_Directory": {
						"type": "string",
						"defaultValue": "SourceToRaw"
					},
					"Control_File": {
						"type": "string",
						"defaultValue": "Configchangesettable.JSON"
					},
					"Container_Name": {
						"type": "string",
						"defaultValue": "dataplatform"
					}
				},
				"folder": {
					"name": "DEMO_PIPELINES"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-19T10:02:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_CDC_CONFIG_PATH')]",
				"[concat(variables('factoryId'), '/pipelines/PL_REFERENCE_DATA_RAW_COPY_FULL')]",
				"[concat(variables('factoryId'), '/pipelines/PL_RAW_COPY_FULL_DEMO')]",
				"[concat(variables('factoryId'), '/pipelines/EXEC_RAW_ASSEMBLY_PROCESSING')]",
				"[concat(variables('factoryId'), '/pipelines/PL_GOALS_FULL_LOAD')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL_SRC_TBL')]",
				"[concat(variables('factoryId'), '/datasets/DS_SINK_ADLS_C1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Master Pipeline to invoke data ingestion and data processing pipelines",
				"activities": [
					{
						"name": "PL_C1_INGESTION_MASTER",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_C1_INGESTION_MASTER_",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PL_PROCESSING_MASTER",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_C1_INGESTION_MASTER",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_PROCESSING_MASTER",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PL_TEMP_CLEANUP",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PL_PROCESSING_MASTER",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_TEMP_CLEANUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_C1_INGESTION_MASTER_')]",
				"[concat(variables('factoryId'), '/pipelines/PL_PROCESSING_MASTER')]",
				"[concat(variables('factoryId'), '/pipelines/PL_TEMP_CLEANUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_MASTER_INITIAL_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACTIVITY_EXEC_PL_C1_INGESTION_MASTER",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_C1_TO_RAW_INITIAL_LOAD",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACTIVITY_EXEC_PL_PROCESSING_MASTER",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ACTIVITY_EXEC_PL_C1_INGESTION_MASTER",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_PROCESSING_MASTER_INITIAL_LOAD",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACTIVITY_EXEC_PL_DELETE_FILE",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ACTIVITY_EXEC_PL_PROCESSING_MASTER",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_TEMP_CLEANUP",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_C1_TO_RAW_INITIAL_LOAD')]",
				"[concat(variables('factoryId'), '/pipelines/PL_PROCESSING_MASTER_INITIAL_LOAD')]",
				"[concat(variables('factoryId'), '/pipelines/PL_TEMP_CLEANUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_MOVE_RAW_FILE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy raw file from current date folder  to Run Folder",
				"activities": [
					{
						"name": "READ_CFG_RAW_FILE",
						"description": "Lookup the list of Raw files",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_GETRAWFILELIST",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat(pipeline().parameters.Control_Folder,'/',pipeline().parameters.Control_Directory,'/')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.Control_File",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ITERATE_RAW_FILELIST",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "READ_CFG_RAW_FILE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('READ_CFG_RAW_FILE').output.value",
								"type": "Expression"
							},
							"batchCount": 25,
							"activities": [
								{
									"name": "ACT_COPY_RAW_TO_RUN",
									"description": "Copy raw files from current date folder to Run folder",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "*.csv",
													"type": "Expression"
												}
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_RAW_FILE",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@concat(item().Tenant,'/',item().SinkFolder,'/',item().SubjectArea,'/',item().Source,'/',item().Table_Name,'/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_RUN",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@concat(item().Tenant,'/',item().SinkFolder,'/',item().SubjectArea,'/',item().Source,'/',item().Table_Name,'/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'),'/Run')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(item().Table_Name,formatDateTime(utcnow(),'yyyy'),formatDateTime(utcnow(),'MM'),formatDateTime(utcnow(),'dd'),formatDateTime(utcnow(),'HH'),formatDateTime(utcnow(),'mm'),formatDateTime(utcnow(),'ss'),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ACT_DELETE_RAW_FILE",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "ACT_COPY_RAW_TO_RUN",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_DELETE_RAW_FILE",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@concat(item().Tenant,'/',item().SinkFolder,'/',item().SubjectArea,'/',item().Source,'/',item().Table_Name,'/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(item().Table_Name,formatDateTime(utcnow(),'yyyy'),formatDateTime(utcnow(),'MM'),formatDateTime(utcnow(),'dd'),'.csv')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Control_Folder": {
						"type": "string",
						"defaultValue": "dataplatform-config-dev"
					},
					"Control_Directory": {
						"type": "string",
						"defaultValue": "QA-SourceToRaw"
					},
					"Control_File": {
						"type": "string",
						"defaultValue": "Configchangesettable.JSON"
					}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_GETRAWFILELIST')]",
				"[concat(variables('factoryId'), '/datasets/DS_RAW_FILE')]",
				"[concat(variables('factoryId'), '/datasets/DS_RUN')]",
				"[concat(variables('factoryId'), '/datasets/DS_DELETE_RAW_FILE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_PROCESSING_MASTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Master Pipeline to invoke all the data pipelines from Curated to CDS",
				"activities": [
					{
						"name": "ACT_PROCESSING_MASTER",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/DataPlatform/Release3.0.5/ProcessingWorkFlow/ProcessingWorkFlow",
							"baseParameters": {
								"config_path_read_rtoc": {
									"value": "/mnt/dataplatformconfig/RawToCurated/Configread/",
									"type": "Expression"
								},
								"config_path_transform_rtoc": {
									"value": "/mnt/dataplatformconfig/RawToCurated/Configtransform/",
									"type": "Expression"
								},
								"config_path_write": {
									"value": "/mnt/dataplatformconfig/RawToCurated/Configwrite/",
									"type": "Expression"
								},
								"extract_path": {
									"value": "/mnt/dataplatform/Tenant1/Raw/PolicyAdmin/SRC_ConceptOne/",
									"type": "Expression"
								},
								"curated_path": {
									"value": "/mnt/dataplatform/Tenant1/Curated/PolicyAdmin/SRC_ConceptOne/",
									"type": "Expression"
								},
								"ud_config_path_trasnform_rtoc": {
									"value": "/mnt/dataplatformconfig/RawToCurated/UdConfigtransform/",
									"type": "Expression"
								},
								"config_code_decode": {
									"value": "/dbfs/mnt/dataplatformconfig/configCodeDecode/commonCodeList.json",
									"type": "Expression"
								},
								"ActivityID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"config_path_dq": {
									"value": "/mnt/dataplatformconfig/RawToCurated/Configdq/",
									"type": "Expression"
								},
								"config_path_read_ctop": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configread/",
									"type": "Expression"
								},
								"config_path_transform_ctop": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configtransform/",
									"type": "Expression"
								},
								"config_path_write_json": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configwrite/",
									"type": "Expression"
								},
								"config_path_postransformation": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configposttransform/",
									"type": "Expression"
								},
								"ud_config_path_trasnform_ctop": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/UdConfigtransform/",
									"type": "Expression"
								},
								"processed_path": {
									"value": "/mnt/dataplatform/Tenant1/Processed/",
									"type": "Expression"
								},
								"isInitialLoad": {
									"value": "false",
									"type": "Expression"
								},
								"config_path_write_Prcsd": {
									"value": "/mnt/dataplatformconfig/ProcessedToCDS/",
									"type": "Expression"
								},
								"istracing_enabled": {
									"value": "true",
									"type": "Expression"
								},
								"extract_reference_path": {
									"value": "/mnt/dataplatform/Tenant1/Raw/ReferenceData/BlobData/",
									"type": "Expression"
								},
								"dq_constants": {
									"value": "/mnt/dataplatformconfig/RawToCurated/Dqconstants/",
									"type": "Expression"
								},
								"ingestion_time": {
									"value": "@{formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'))}",
									"type": "Expression"
								},
								"raw_logging_file": {
									"value": "/mnt/dataplatform/Tenant1/Log/",
									"type": "Expression"
								},
								"config_path_dq_curated": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configdq/",
									"type": "Expression"
								},
								"reprocessing_path": {
									"value": "/mnt/dataplatform/Tenant1/Raw/Rerun/",
									"type": "Expression"
								},
								"raw_data_date_format": {
									"value": "@concat('/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
									"type": "Expression"
								},
								"scope": {
									"value": "\"\"",
									"type": "Expression"
								},
								"ingestion_url": {
									"value": "https://vm-paspipeline-apiapp.azurewebsites.net/api/pipeline/savepipelineRunDate",
									"type": "Expression"
								},
								"timestamp_upd_auth": {
									"value": "false",
									"type": "Expression"
								},
								"auth_url": {
									"value": "\"\"",
									"type": "Expression"
								},
								"batchCount": {
									"value": "5",
									"type": "Expression"
								},
								"Config_FullPath_Read": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/configFullRead/",
									"type": "Expression"
								},
								"configPath_CCT": {
									"value": "/dbfs/mnt/dataplatformconfig/CuratedToProcessed/ConfigCCT/Config_ColumnTrack.json",
									"type": "Expression"
								},
								"config_path_postransformation_cct": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configposttransformcct/",
									"type": "Expression"
								},
								"config_path_write_cct": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configwritecct/",
									"type": "Expression"
								},
								"metadataPath_CCT": {
									"value": "/mnt/dataplatform/Tenant1/Curated/PolicyAdmin/SRC_ConceptOne/Metadata/",
									"type": "Expression"
								}
							},
							"libraries": [
								{
									"pypi": {
										"package": "pypika"
									}
								},
								{
									"pypi": {
										"package": "jsonschema"
									}
								},
								{
									"pypi": {
										"package": "faker"
									}
								},
								{
									"pypi": {
										"package": "jsonpath_ng"
									}
								},
								{
									"pypi": {
										"package": "azure.cosmos"
									}
								}
							]
						},
						"linkedServiceName": {
							"referenceName": "LS_ADBCLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADBCLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_PROCESSING_MASTER_INITIAL_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Master Pipeline to invoke all the data pipelines from Curated to CDS",
				"activities": [
					{
						"name": "ACT_PROCESSING_MASTER",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/DataPlatform/Release3.0.5/ProcessingWorkFlow/ProcessingWorkFlow",
							"baseParameters": {
								"config_path_read_rtoc": {
									"value": "/mnt/dataplatformconfig/RawToCurated/Configread/",
									"type": "Expression"
								},
								"config_path_transform_rtoc": {
									"value": "/mnt/dataplatformconfig/RawToCurated/Configtransform/",
									"type": "Expression"
								},
								"config_path_write": {
									"value": "/mnt/dataplatformconfig/RawToCurated/Configwrite/",
									"type": "Expression"
								},
								"extract_path": {
									"value": "/mnt/dataplatform/Tenant1/Raw/PolicyAdmin/SRC_ConceptOne/",
									"type": "Expression"
								},
								"curated_path": {
									"value": "/mnt/dataplatform/Tenant1/Curated/PolicyAdmin/SRC_ConceptOne/",
									"type": "Expression"
								},
								"ud_config_path_trasnform_rtoc": {
									"value": "/mnt/dataplatformconfig/RawToCurated/UdConfigtransform/",
									"type": "Expression"
								},
								"config_code_decode": {
									"value": "/dbfs/mnt/dataplatformconfig/configCodeDecode/commonCodeList.json",
									"type": "Expression"
								},
								"ActivityID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"config_path_dq": {
									"value": "/mnt/dataplatformconfig/RawToCurated/Configdq/",
									"type": "Expression"
								},
								"config_path_read_ctop": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configread/",
									"type": "Expression"
								},
								"config_path_transform_ctop": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configtransform/",
									"type": "Expression"
								},
								"config_path_write_json": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configwrite/",
									"type": "Expression"
								},
								"config_path_postransformation": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configposttransform/",
									"type": "Expression"
								},
								"ud_config_path_trasnform_ctop": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/UdConfigtransform/",
									"type": "Expression"
								},
								"processed_path": {
									"value": "/mnt/dataplatform/Tenant1/Processed/",
									"type": "Expression"
								},
								"isInitialLoad": {
									"value": "true",
									"type": "Expression"
								},
								"config_path_write_Prcsd": {
									"value": "/mnt/dataplatformconfig/ProcessedToCDS/",
									"type": "Expression"
								},
								"istracing_enabled": {
									"value": "true",
									"type": "Expression"
								},
								"extract_reference_path": {
									"value": "/mnt/dataplatform/Tenant1/Raw/ReferenceData/BlobData/",
									"type": "Expression"
								},
								"dq_constants": {
									"value": "/mnt/dataplatformconfig/RawToCurated/Dqconstants/",
									"type": "Expression"
								},
								"ingestion_time": {
									"value": "@{formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'))}",
									"type": "Expression"
								},
								"raw_logging_file": {
									"value": "/mnt/dataplatform/Tenant1/Log/",
									"type": "Expression"
								},
								"config_path_dq_curated": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configdq/",
									"type": "Expression"
								},
								"reprocessing_path": {
									"value": "/mnt/dataplatform/Tenant1/Raw/Rerun/",
									"type": "Expression"
								},
								"raw_data_date_format": {
									"value": "@concat('/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
									"type": "Expression"
								},
								"scope": {
									"value": "\"\"",
									"type": "Expression"
								},
								"ingestion_url": {
									"value": "https://vm-paspipeline-apiapp.azurewebsites.net/api/pipeline/savepipelineRunDate",
									"type": "Expression"
								},
								"timestamp_upd_auth": {
									"value": "false",
									"type": "Expression"
								},
								"auth_url": {
									"value": "\"\"",
									"type": "Expression"
								},
								"batchCount": {
									"value": "5",
									"type": "Expression"
								},
								"Config_FullPath_Read": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/configFullRead/",
									"type": "Expression"
								},
								"configPath_CCT": {
									"value": "/dbfs/mnt/dataplatformconfig/CuratedToProcessed/ConfigCCT/Config_ColumnTrack.json",
									"type": "Expression"
								},
								"config_path_postransformation_cct": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configposttransformcct/",
									"type": "Expression"
								},
								"config_path_write_cct": {
									"value": "/mnt/dataplatformconfig/CuratedToProcessed/Configwritecct/",
									"type": "Expression"
								},
								"metadataPath_CCT": {
									"value": "/mnt/dataplatform/Tenant1/Curated/PolicyAdmin/SRC_ConceptOne/Metadata/",
									"type": "Expression"
								}
							},
							"libraries": [
								{
									"pypi": {
										"package": "pypika"
									}
								},
								{
									"pypi": {
										"package": "jsonschema"
									}
								},
								{
									"pypi": {
										"package": "faker"
									}
								},
								{
									"pypi": {
										"package": "jsonpath_ng"
									}
								},
								{
									"pypi": {
										"package": "azure.cosmos"
									}
								}
							]
						},
						"linkedServiceName": {
							"referenceName": "LS_ADBCLS",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADBCLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_RAW_COPY_FULL_DEMO')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external config file to store source table list with partitions for each table.",
				"activities": [
					{
						"name": "ACTIVITY_LKP_READ_CONFIG",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DATASET_C1_REF_TABLE_CONFIG_PATH",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat(pipeline().parameters.Control_Folder,'/',pipeline().parameters.Control_Directory,'/')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.Control_File",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ACTIVITY_ITERATE_TABLELIST",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ACTIVITY_LKP_READ_CONFIG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACTIVITY_LKP_READ_CONFIG').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "ACTIVITY_COPY_TABLE",
									"description": "Copy activity to copy each table from source database store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"additionalColumns": [
												{
													"name": "IngestionDateTimeOn",
													"value": {
														"value": "@concat(formatDateTime(utcnow(),'yyyy'),'-',formatDateTime(utcnow(),'MM'),'-',formatDateTime(utcnow(),'dd'),' ',formatDateTime(utcnow(),'HH'),':',formatDateTime(utcnow(),'mm'),':',formatDateTime(utcnow(),'ss'))",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "SELECT DISTINCT C.*,NULL AS SYS_CHANGE_VERSION, 'I' AS SYS_CHANGE_OPERATION FROM @{item().TableSchema}.@{item().TableName} as C",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "DATASET_C1_REF_TABLE_LIST",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DATASET_C1_REF_TABLE_SINK_CONFIG",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@concat(item().Tenant,'/',item().SinkFolder,'/',item().SubjectArea,'/',item().Source,'/',item().TableName,'/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(item().TableName,formatDateTime(utcnow(), 'yyyy'), formatDateTime(utcnow(),'MM'), formatDateTime(utcnow(),'dd'),formatDateTime(utcnow(),'HH'),formatDateTime(utcnow(),'mm'),formatDateTime(utcnow(),'ss'),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Control_Folder": {
						"type": "string",
						"defaultValue": "dataplatform-config"
					},
					"Control_File": {
						"type": "string",
						"defaultValue": "Configreferencetable.JSON"
					},
					"Control_Directory": {
						"type": "string",
						"defaultValue": "SourceToRaw"
					}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_REF_TABLE_CONFIG_PATH')]",
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_REF_TABLE_LIST')]",
				"[concat(variables('factoryId'), '/datasets/DATASET_C1_REF_TABLE_SINK_CONFIG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_REFERENCE_DATA_RAW_COPY_FULL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline to ingest reference data from blob to raw  ",
				"activities": [
					{
						"name": "ACTIVITY_LKP_READ_CONFIG",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DATASET_REFERENCE_CONFIG_FILE",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@concat(pipeline().parameters.Control_Folder,'/',pipeline().parameters.Control_Directory,'/')",
										"type": "Expression"
									},
									"FileName": {
										"value": "@pipeline().parameters.Control_File",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ACTIVITY_ITERATE_FILE_TO_RAW",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ACTIVITY_FILTER_RAW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACTIVITY_FILTER_RAW').output.value",
								"type": "Expression"
							},
							"batchCount": 25,
							"activities": [
								{
									"name": "REFERENCE_DATA_COPY_TO_RAW",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 2
									},
									"inputs": [
										{
											"referenceName": "DATASET_REFERENCE_DATA_FILE",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@concat(item().SourceRootFolder,'/',item().SourceFolder,'/')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@item().FileName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DATASET_SINK_REFERENCE_RAW_FILE",
											"type": "DatasetReference",
											"parameters": {
												"FolderPath": {
													"value": "@concat(item().TargetRootFolder,'/',item().TargetDataLake,'/',item().SubjectArea,'/',item().SourceName,'/',item().TargetFolder,'/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'))",
													"type": "Expression"
												},
												"FileName": {
													"value": "@concat(item().TargetFileName,formatDateTime(utcnow(),'yyyy'),formatDateTime(utcnow(),'MM'),formatDateTime(utcnow(),'dd'),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "ACTIVITY_FILTER_RAW",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "ACTIVITY_LKP_READ_CONFIG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACTIVITY_LKP_READ_CONFIG').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(equals(item().TargetRootFolder,'Tenant1'), equals(item().TargetDataLake,'Raw'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Control_Folder": {
						"type": "string",
						"defaultValue": "dataplatform-config"
					},
					"Control_Directory": {
						"type": "string",
						"defaultValue": "SourceToRaw"
					},
					"Control_File": {
						"type": "string",
						"defaultValue": "Configreferencedata.JSON"
					}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-13T14:58:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DATASET_REFERENCE_CONFIG_FILE')]",
				"[concat(variables('factoryId'), '/datasets/DATASET_REFERENCE_DATA_FILE')]",
				"[concat(variables('factoryId'), '/datasets/DATASET_SINK_REFERENCE_RAW_FILE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SYNAPSE_RESUME_PAUSE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get list",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://management.azure.com/subscriptions/',pipeline().parameters.SubscriptionID,'/resourceGroups/',pipeline().parameters.ResourceGroup,'/providers/Microsoft.Synapse/workspaces/',pipeline().parameters.WorkspaceName,'/sqlPools?api-version=2019-06-01-preview')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": {
									"value": "https://management.azure.com/",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Filter_PROD",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get list",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get list').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@not(endswith(item().name,'prod'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach_Pool",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter_PROD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter_PROD').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CheckState",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": {
											"value": "@concat('https://management.azure.com/subscriptions/',pipeline().parameters.SubscriptionID,'/resourceGroups/',pipeline().parameters.ResourceGroup,'/providers/Microsoft.Synapse/workspaces/',pipeline().parameters.WorkspaceName,'/sqlPools/',item().name,'?api-version=2019-06-01-preview')",
											"type": "Expression"
										},
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": {
												"value": "https://management.azure.com/",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "State-PauseOrResume",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "CheckState",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@concat(activity('CheckState').output.properties.status,'-',pipeline().parameters.PauseOrResume)",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Paused-Resume",
												"activities": [
													{
														"name": "SQLPoolResume",
														"type": "WebActivity",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"url": {
																"value": "@concat('https://management.azure.com/subscriptions/',pipeline().parameters.SubscriptionID,'/resourceGroups/',pipeline().parameters.ResourceGroup,'/providers/Microsoft.Synapse/workspaces/',pipeline().parameters.WorkspaceName,'/sqlPools/',activity('CheckState').output.name,'/resume?api-version=2019-06-01-preview')",
																"type": "Expression"
															},
															"method": "POST",
															"headers": {},
															"body": {
																"value": "{}",
																"type": "Expression"
															},
															"authentication": {
																"type": "MSI",
																"resource": {
																	"value": "https://management.azure.com/",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "Online-Pause",
												"activities": [
													{
														"name": "SQLPoolPause",
														"type": "WebActivity",
														"dependsOn": [],
														"policy": {
															"timeout": "7.00:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"url": {
																"value": "@concat('https://management.azure.com/subscriptions/',pipeline().parameters.SubscriptionID,'/resourceGroups/',pipeline().parameters.ResourceGroup,'/providers/Microsoft.Synapse/workspaces/',pipeline().parameters.WorkspaceName,'/sqlPools/',activity('CheckState').output.name,'/pause?api-version=2019-06-01-preview')",
																"type": "Expression"
															},
															"method": "POST",
															"headers": {},
															"body": {
																"value": "{}",
																"type": "Expression"
															},
															"authentication": {
																"type": "MSI",
																"resource": {
																	"value": "https://management.azure.com/",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ResourceGroup": {
						"type": "string",
						"defaultValue": "DataPlatform-Demo"
					},
					"SubscriptionID": {
						"type": "string",
						"defaultValue": "543c86f3-c680-437b-a0cf-453e9152ed1d"
					},
					"WorkspaceName": {
						"type": "string",
						"defaultValue": "dp-demo-synapseanalytics"
					},
					"SQLPoolName": {
						"type": "string",
						"defaultValue": "demodpdedicatedsqlpool"
					},
					"PauseorResume": {
						"type": "string",
						"defaultValue": "Pause"
					}
				},
				"folder": {
					"name": "Synapse POC"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-04T13:21:53Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_TEMP_CLEANUP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DELETE_RAW_FILES",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_DELETE_PROCESSED_FILE",
								"type": "DatasetReference",
								"parameters": {
									"FolderPath": {
										"value": "@concat(pipeline().parameters.Control_Folder,'/',pipeline().parameters.Control_RawFolder)",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": {
									"value": "*.csv",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "LOG_FILE_CLEANUP",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_LOGFILE_CLEANUP",
								"type": "DatasetReference",
								"parameters": {
									"Folder": {
										"value": "@concat(pipeline().parameters.Control_Folder,'/','Tenant1/Log/CopyTableLogs')",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": {
									"value": "*.csv",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Control_Folder": {
						"type": "string",
						"defaultValue": "dataplatform"
					},
					"Control_RawFolder": {
						"type": "string",
						"defaultValue": "Tenant1/Raw/Rerun/"
					}
				},
				"folder": {
					"name": "Framework_Dataplatform"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-16T09:51:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_DELETE_PROCESSED_FILE')]",
				"[concat(variables('factoryId'), '/datasets/DS_LOGFILE_CLEANUP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_C1_CDC_CONFIG_PATH')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLOB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Folder",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Tenant": {
							"type": "string"
						},
						"ProcessedFolder": {
							"type": "string"
						},
						"Type": {
							"type": "string"
						},
						"Subjectarea": {
							"type": "string"
						},
						"ChangesetPath": {
							"type": "string"
						},
						"FileName": {
							"type": "string"
						},
						"SinkType": {
							"type": "string"
						},
						"Database": {
							"type": "string"
						},
						"CollectionName": {
							"type": "string"
						},
						"files": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"filesToWrite": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"fileName": {
													"type": "string"
												},
												"filePath": {
													"type": "string"
												},
												"fileType": {
													"type": "string"
												},
												"Tenant": {
													"type": "string"
												},
												"Database": {
													"type": "string"
												},
												"CollectionName": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						},
						"targetTables": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"tableName": {
										"type": "string"
									},
									"dependencies": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"sourceTableName": {
													"type": "string"
												},
												"sourceColName": {
													"type": "string"
												},
												"dependentTableName": {
													"type": "string"
												},
												"dependentColumns": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"name": {
																"type": "string"
															}
														}
													}
												}
											}
										}
									},
									"tableList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"fileName": {
													"type": "string"
												},
												"source": {
													"type": "string"
												},
												"alias": {
													"type": "string"
												},
												"isSelectRemainingColumns": {
													"type": "boolean"
												},
												"selectionCriteria": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"columnName": {
																"type": "array",
																"items": {
																	"type": "string"
																}
															},
															"function": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"name": {
																			"type": "string"
																		},
																		"params": {
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"name": {
																						"type": "string"
																					},
																					"value": {
																						"type": "string"
																					}
																				}
																			}
																		},
																		"function": {
																			"type": "array"
																		}
																	}
																}
															},
															"alias": {
																"type": "string"
															},
															"isUDColumn": {
																"type": "boolean"
															},
															"ConstantValue": {
																"type": "string"
															},
															"caseStatements": {
																"type": "object",
																"properties": {
																	"conditionalChecks": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"condition": {
																					"type": "string"
																				},
																				"result": {
																					"type": "string"
																				},
																				"type": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"else": {
																		"type": "string"
																	},
																	"function": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"name": {
																					"type": "string"
																				},
																				"params": {
																					"type": "array",
																					"items": {
																						"type": "object",
																						"properties": {
																							"name": {
																								"type": "string"
																							},
																							"value": {
																								"type": "string"
																							}
																						}
																					}
																				},
																				"function": {
																					"type": "array"
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												},
												"joins": {
													"type": "array"
												},
												"where": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"originalInput": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	},
																	"functionname": {
																		"type": "string"
																	},
																	"params": {
																		"type": "array",
																		"items": {
																			"type": "string"
																		}
																	}
																}
															},
															"inputToMatch": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	},
																	"functionname": {
																		"type": "string"
																	},
																	"params": {
																		"type": "array",
																		"items": {
																			"type": "string"
																		}
																	}
																}
															},
															"operation": {
																"type": "string"
															},
															"logicalAndOperation": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"originalInput": {
																			"type": "object"
																		},
																		"inputToMatch": {
																			"type": "object"
																		},
																		"operation": {
																			"type": "string"
																		},
																		"logicalAndOperation": {
																			"type": "array"
																		},
																		"logicalOrOperation": {
																			"type": "array"
																		}
																	}
																}
															},
															"logicalOrOperation": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"originalInput": {
																			"type": "object"
																		},
																		"inputToMatch": {
																			"type": "object"
																		},
																		"operation": {
																			"type": "string"
																		},
																		"logicalAndOperation": {
																			"type": "array"
																		},
																		"logicalOrOperation": {
																			"type": "array"
																		}
																	}
																}
															}
														}
													}
												},
												"groupby": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"originalInput": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	},
																	"functionname": {
																		"type": "string"
																	},
																	"params": {
																		"type": "array",
																		"items": {
																			"type": "string"
																		}
																	}
																}
															},
															"inputToMatch": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	},
																	"functionname": {
																		"type": "string"
																	},
																	"params": {
																		"type": "array",
																		"items": {
																			"type": "string"
																		}
																	}
																}
															},
															"operation": {
																"type": "string"
															},
															"logicalAndOperation": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"originalInput": {
																			"type": "object"
																		},
																		"inputToMatch": {
																			"type": "object"
																		},
																		"operation": {
																			"type": "string"
																		},
																		"logicalAndOperation": {
																			"type": "array"
																		},
																		"logicalOrOperation": {
																			"type": "array"
																		}
																	}
																}
															},
															"logicalOrOperation": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"originalInput": {
																			"type": "object"
																		},
																		"inputToMatch": {
																			"type": "object"
																		},
																		"operation": {
																			"type": "string"
																		},
																		"logicalAndOperation": {
																			"type": "array"
																		},
																		"logicalOrOperation": {
																			"type": "array"
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						},
						"sourceStage": {
							"type": "string"
						},
						"sourceTables": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"fileType": {
										"type": "string"
									},
									"filePath": {
										"type": "string"
									},
									"fullFilePath": {
										"type": "string"
									},
									"alias": {
										"type": "string"
									},
									"dataFeedType": {
										"type": "string"
									},
									"pkList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												}
											}
										}
									},
									"columns": {
										"type": "array"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_C1_CONNECTOR_VALIDATION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREM_SQLSERVER",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ONPREM_SQLSERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_C1_GET_CHANGE_SET')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREM_SQLSERVER",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ONPREM_SQLSERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_C1_GET_CHANGE_VERSION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREM_SQLSERVER",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ONPREM_SQLSERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_C1_INITIAL_LOAD_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREM_SQLSERVER",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ONPREM_SQLSERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_C1_REF_TABLE_CONFIG_PATH')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLOB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Folder",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Tenant": {
							"type": "string"
						},
						"ProcessedFolder": {
							"type": "string"
						},
						"Type": {
							"type": "string"
						},
						"Subjectarea": {
							"type": "string"
						},
						"ChangesetPath": {
							"type": "string"
						},
						"FileName": {
							"type": "string"
						},
						"SinkType": {
							"type": "string"
						},
						"Database": {
							"type": "string"
						},
						"CollectionName": {
							"type": "string"
						},
						"files": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"filesToWrite": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"fileName": {
													"type": "string"
												},
												"filePath": {
													"type": "string"
												},
												"fileType": {
													"type": "string"
												},
												"Tenant": {
													"type": "string"
												},
												"Database": {
													"type": "string"
												},
												"CollectionName": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						},
						"targetTables": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"tableName": {
										"type": "string"
									},
									"dependencies": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"sourceTableName": {
													"type": "string"
												},
												"sourceColName": {
													"type": "string"
												},
												"dependentTableName": {
													"type": "string"
												},
												"dependentColumns": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"name": {
																"type": "string"
															}
														}
													}
												}
											}
										}
									},
									"tableList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"fileName": {
													"type": "string"
												},
												"source": {
													"type": "string"
												},
												"alias": {
													"type": "string"
												},
												"isSelectRemainingColumns": {
													"type": "boolean"
												},
												"selectionCriteria": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"columnName": {
																"type": "array",
																"items": {
																	"type": "string"
																}
															},
															"function": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"name": {
																			"type": "string"
																		},
																		"params": {
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"name": {
																						"type": "string"
																					},
																					"value": {
																						"type": "string"
																					}
																				}
																			}
																		},
																		"function": {
																			"type": "array"
																		}
																	}
																}
															},
															"alias": {
																"type": "string"
															},
															"isUDColumn": {
																"type": "boolean"
															},
															"ConstantValue": {
																"type": "string"
															},
															"caseStatements": {
																"type": "object",
																"properties": {
																	"conditionalChecks": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"condition": {
																					"type": "string"
																				},
																				"result": {
																					"type": "string"
																				},
																				"type": {
																					"type": "string"
																				}
																			}
																		}
																	},
																	"else": {
																		"type": "string"
																	},
																	"function": {
																		"type": "array",
																		"items": {
																			"type": "object",
																			"properties": {
																				"name": {
																					"type": "string"
																				},
																				"params": {
																					"type": "array",
																					"items": {
																						"type": "object",
																						"properties": {
																							"name": {
																								"type": "string"
																							},
																							"value": {
																								"type": "string"
																							}
																						}
																					}
																				},
																				"function": {
																					"type": "array"
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												},
												"joins": {
													"type": "array"
												},
												"where": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"originalInput": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	},
																	"functionname": {
																		"type": "string"
																	},
																	"params": {
																		"type": "array",
																		"items": {
																			"type": "string"
																		}
																	}
																}
															},
															"inputToMatch": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	},
																	"functionname": {
																		"type": "string"
																	},
																	"params": {
																		"type": "array",
																		"items": {
																			"type": "string"
																		}
																	}
																}
															},
															"operation": {
																"type": "string"
															},
															"logicalAndOperation": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"originalInput": {
																			"type": "object"
																		},
																		"inputToMatch": {
																			"type": "object"
																		},
																		"operation": {
																			"type": "string"
																		},
																		"logicalAndOperation": {
																			"type": "array"
																		},
																		"logicalOrOperation": {
																			"type": "array"
																		}
																	}
																}
															},
															"logicalOrOperation": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"originalInput": {
																			"type": "object"
																		},
																		"inputToMatch": {
																			"type": "object"
																		},
																		"operation": {
																			"type": "string"
																		},
																		"logicalAndOperation": {
																			"type": "array"
																		},
																		"logicalOrOperation": {
																			"type": "array"
																		}
																	}
																}
															}
														}
													}
												},
												"groupby": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"originalInput": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	},
																	"functionname": {
																		"type": "string"
																	},
																	"params": {
																		"type": "array",
																		"items": {
																			"type": "string"
																		}
																	}
																}
															},
															"inputToMatch": {
																"type": "object",
																"properties": {
																	"type": {
																		"type": "string"
																	},
																	"functionname": {
																		"type": "string"
																	},
																	"params": {
																		"type": "array",
																		"items": {
																			"type": "string"
																		}
																	}
																}
															},
															"operation": {
																"type": "string"
															},
															"logicalAndOperation": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"originalInput": {
																			"type": "object"
																		},
																		"inputToMatch": {
																			"type": "object"
																		},
																		"operation": {
																			"type": "string"
																		},
																		"logicalAndOperation": {
																			"type": "array"
																		},
																		"logicalOrOperation": {
																			"type": "array"
																		}
																	}
																}
															},
															"logicalOrOperation": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"originalInput": {
																			"type": "object"
																		},
																		"inputToMatch": {
																			"type": "object"
																		},
																		"operation": {
																			"type": "string"
																		},
																		"logicalAndOperation": {
																			"type": "array"
																		},
																		"logicalOrOperation": {
																			"type": "array"
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						},
						"sourceStage": {
							"type": "string"
						},
						"sourceTables": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"fileType": {
										"type": "string"
									},
									"filePath": {
										"type": "string"
									},
									"fullFilePath": {
										"type": "string"
									},
									"alias": {
										"type": "string"
									},
									"dataFeedType": {
										"type": "string"
									},
									"pkList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"name": {
													"type": "string"
												}
											}
										}
									},
									"columns": {
										"type": "array"
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_C1_REF_TABLE_LIST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREM_SQLSERVER",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ONPREM_SQLSERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_C1_REF_TABLE_SINK_CONFIG')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": "dataplatform"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Entity_ID",
						"type": "String"
					},
					{
						"name": "Address_Type",
						"type": "String"
					},
					{
						"name": "Address_ID",
						"type": "String"
					},
					{
						"name": "Address_Line_1",
						"type": "String"
					},
					{
						"name": "Address_Line_2",
						"type": "String"
					},
					{
						"name": "Address_Line_3",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "County",
						"type": "String"
					},
					{
						"name": "Zip",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Dflt_Address_Ind",
						"type": "String"
					},
					{
						"name": "Row_Insert_TS",
						"type": "String"
					},
					{
						"name": "Row_Update_TS",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_C1_SET_CHANGE_VERSION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREM_SQLSERVER",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ONPREM_SQLSERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_C1_SINK_CHANGE_SET')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": "dataplatform"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_REFERENCE_CONFIG_FILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLOB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"Tenant": {
							"type": "string"
						},
						"SubjectArea": {
							"type": "string"
						},
						"Source": {
							"type": "string"
						},
						"SinkFolder": {
							"type": "string"
						},
						"SourceType": {
							"type": "string"
						},
						"TableSchema": {
							"type": "string"
						},
						"TableName": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_REFERENCE_DATA_FILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLOB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Code",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					},
					{
						"name": "CreatedOn",
						"type": "String"
					},
					{
						"name": "CreatedBy",
						"type": "String"
					},
					{
						"name": "ModifiedOn",
						"type": "String"
					},
					{
						"name": "ModifiedBy",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_SINK_REFERENCE_CURATED_FILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": "dataplatformqa"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "InspectionId",
						"type": "UTF8"
					},
					{
						"name": "ClaimId",
						"type": "UTF8"
					},
					{
						"name": "InspectionDate",
						"type": "UTF8"
					},
					{
						"name": "IncidentImages",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DATASET_SINK_REFERENCE_RAW_FILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": "dataplatform"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ClaimId",
						"type": "String"
					},
					{
						"name": "InspectionId",
						"type": "String"
					},
					{
						"name": "InspectionDate",
						"type": "String"
					},
					{
						"name": "IncidentImages",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_AMWINS_ZIP_FILES')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "*.zip",
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"compressionLevel": "Optimal",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CAPTURETBLLOGS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					},
					"Container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ActivityID",
						"type": "String"
					},
					{
						"name": "EndTime",
						"type": "String"
					},
					{
						"name": "FileName",
						"type": "String"
					},
					{
						"name": "LevelNoteBook",
						"type": "String"
					},
					{
						"name": "MasterNotebook",
						"type": "String"
					},
					{
						"name": "Message",
						"type": "String"
					},
					{
						"name": "Notebook",
						"type": "String"
					},
					{
						"name": "Query",
						"type": "String"
					},
					{
						"name": "StartTime",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "SubFileName",
						"type": "String"
					},
					{
						"name": "TableName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CHECKRECORDCOUNT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().Container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ActivityID",
						"type": "String"
					},
					{
						"name": "EndTime",
						"type": "String"
					},
					{
						"name": "FileName",
						"type": "String"
					},
					{
						"name": "LevelNoteBook",
						"type": "String"
					},
					{
						"name": "MasterNotebook",
						"type": "String"
					},
					{
						"name": "Message",
						"type": "String"
					},
					{
						"name": "Notebook",
						"type": "String"
					},
					{
						"name": "Query",
						"type": "String"
					},
					{
						"name": "StartTime",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "SubFileName",
						"type": "String"
					},
					{
						"name": "TableName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DELETE_PROCESSED_FILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DELETE_RAW_FILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": "dataplatformqa"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_GETRAWFILELIST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLOB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().Folder",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_GET_FILES')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLOB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ControlFolder": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().ControlFolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_GOALSFILES_SINK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_GOALS_FILESLIST')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLOB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_GOALS_FOLDERS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLOB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainorName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().ContainorName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_GOALS_LOGS_SINK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "AmwinsLog.csv",
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_GOALS_RAW_LOG')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"LogPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "GoalsLog.csv",
						"folderPath": {
							"value": "@dataset().LogPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "POLICY NUMBER",
						"type": "String"
					},
					{
						"name": "INSURED NAME",
						"type": "String"
					},
					{
						"name": "F3",
						"type": "String"
					},
					{
						"name": "F4",
						"type": "String"
					},
					{
						"name": "F5",
						"type": "String"
					},
					{
						"name": "F6",
						"type": "String"
					},
					{
						"name": "Total",
						"type": "String"
					},
					{
						"name": "SYS_CHANGE_VERSION",
						"type": "String"
					},
					{
						"name": "SYS_CHANGE_OPERATION",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_LKP_GOALS_LOG')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Containername": {
						"type": "string"
					},
					"Folderpath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "GoalsLog.csv",
						"folderPath": {
							"value": "@dataset().Folderpath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Containername",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_LOGFILE_CLEANUP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().Folder",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_RAW_FILE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": "dataplatformqa"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Entity_ID",
						"type": "String"
					},
					{
						"name": "Address_Type",
						"type": "String"
					},
					{
						"name": "Address_ID",
						"type": "String"
					},
					{
						"name": "Address_Line_1",
						"type": "String"
					},
					{
						"name": "Address_Line_2",
						"type": "String"
					},
					{
						"name": "Address_Line_3",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "County",
						"type": "String"
					},
					{
						"name": "Zip",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Dflt_Address_Ind",
						"type": "String"
					},
					{
						"name": "Row_Insert_TS",
						"type": "String"
					},
					{
						"name": "Row_Update_TS",
						"type": "String"
					},
					{
						"name": "SYS_CHANGE_VERSION",
						"type": "String"
					},
					{
						"name": "SYS_CHANGE_OPERATION",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_RUN')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": "dataplatformqa"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Entity_ID",
						"type": "String"
					},
					{
						"name": "Address_Type",
						"type": "String"
					},
					{
						"name": "Address_ID",
						"type": "String"
					},
					{
						"name": "Address_Line_1",
						"type": "String"
					},
					{
						"name": "Address_Line_2",
						"type": "String"
					},
					{
						"name": "Address_Line_3",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "County",
						"type": "String"
					},
					{
						"name": "Zip",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Dflt_Address_Ind",
						"type": "String"
					},
					{
						"name": "Row_Insert_TS",
						"type": "String"
					},
					{
						"name": "Row_Update_TS",
						"type": "String"
					},
					{
						"name": "SYS_CHANGE_VERSION",
						"type": "String"
					},
					{
						"name": "SYS_CHANGE_OPERATION",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SINK_ADLS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SINK_ADLS_C1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FolderPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": "dataplatform"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SINK_AMWINS_ZIP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SINK_GOALS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ControlFolder": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ControlFolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_SRC_TBL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREM_SQLSERVER",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ONPREM_SQLSERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SRC_GOALS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLOB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ControlFolder": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					},
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().ControlFolder",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SRC_LOGS_GOALS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SuccessLog.csv",
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_STATURE_TABLE_RECORDS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREM_SQLSERVER",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ONPREM_SQLSERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SUCCESSLOG')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLSGEN2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"FolderName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SuccessLog.csv",
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "POLICY NUMBER",
						"type": "String"
					},
					{
						"name": "INSURED NAME",
						"type": "String"
					},
					{
						"name": "F3",
						"type": "String"
					},
					{
						"name": "F4",
						"type": "String"
					},
					{
						"name": "F5",
						"type": "String"
					},
					{
						"name": "F6",
						"type": "String"
					},
					{
						"name": "Total",
						"type": "String"
					},
					{
						"name": "SYS_CHANGE_VERSION",
						"type": "String"
					},
					{
						"name": "SYS_CHANGE_OPERATION",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLSGEN2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_TBLCOUNTQUERY')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREM_SQLSERVER",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ONPREM_SQLSERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLOB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('LS_ABLOB_properties_typeProperties_serviceEndpoint')]",
					"tenant": "[parameters('LS_ABLOB_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('LS_ABLOB_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "Service-Principal-Key"
					},
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADBCLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Databricks  linked service for job cluster",
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-2506037855643491.11.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "Databricks-AccessToken",
							"type": "Expression"
						}
					},
					"newClusterNodeType": "Standard_DS4_v2",
					"newClusterNumOfWorker": "1:2",
					"newClusterSparkEnvVars": {
						"PYSPARK_PYTHON": "/databricks/python3/bin/python3"
					},
					"newClusterVersion": "9.1.x-scala2.12",
					"newClusterInitScripts": [],
					"newClusterDriverNodeType": "Standard_DS4_v2",
					"clusterOption": "Autoscaling"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADLSGEN2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLSGEN2_properties_typeProperties_url')]",
					"tenant": "[parameters('LS_ADLSGEN2_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('LS_ADLSGEN2_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalCredential": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "Service-Principal-Key"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_AKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ONPREM_SQLSERVER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_ONPREM_SQLSERVER_properties_typeProperties_connectionString_secretName')]",
						"secretVersion": "988df328dec9434289578669317cb009"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SYNAPSE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_SYNAPSE_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TR_SYNAPSE_PAUSE')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_SYNAPSE_RESUME_PAUSE",
							"type": "PipelineReference"
						},
						"parameters": {
							"ResourceGroup": "[parameters('TR_SYNAPSE_PAUSE_properties_PL_SYNAPSE_RESUME_PAUSE_parameters_ResourceGroup')]",
							"SubscriptionID": "[parameters('TR_SYNAPSE_PAUSE_properties_PL_SYNAPSE_RESUME_PAUSE_parameters_SubscriptionID')]",
							"WorkspaceName": "[parameters('TR_SYNAPSE_PAUSE_properties_PL_SYNAPSE_RESUME_PAUSE_parameters_WorkspaceName')]",
							"SQLPoolName": "[parameters('TR_SYNAPSE_PAUSE_properties_PL_SYNAPSE_RESUME_PAUSE_parameters_SQLPoolName')]",
							"PauseorResume": "[parameters('TR_SYNAPSE_PAUSE_properties_PL_SYNAPSE_RESUME_PAUSE_parameters_PauseorResume')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-11-04T11:10:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								13,
								18,
								19,
								20,
								21,
								22
							],
							"weekDays": [
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday",
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_SYNAPSE_RESUME_PAUSE')]"
			]
		}
	]
}
